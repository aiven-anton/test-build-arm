name: Create and publish a container image

on:
  push:
    # Publish main branch as `develop` image
    branches:
      - main

    # Publish tags as versioned release and `latest` image
    tags:
      - '*'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Gather context
        id: ctx
        run: |
          echo is_release=${{ github.event_name == 'tag' }} >> $GITHUB_OUTPUT
          echo is_dev=${{ github.event_name != 'tag' }} >> $GITHUB_OUTPUT
          echo created=$(date --rfc-3339=seconds) >> $GITHUB_OUTPUT
          echo version=$(git describe --always) >> $GITHUB_OUTPUT
          echo commit=$(git rev-parse -q --verify HEAD^{commit}) >> $GITHUB_OUTPUT

      # QEMU is used to set up VMs for building non-x86_64 images.
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: "arm,arm64"

      # This is required to build multi-arch images.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=pep440,pattern={{ version }},enable=${{ steps.ctx.outputs.is_release }}
            type=raw,value=latest,enable=${{ steps.ctx.outputs.is_release }}
            type=raw,value=develop,enable=${{ steps.ctx.outputs.is_dev }}

      - uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            CREATED=${{ steps.ctx.outputs.created }}
            VERSION=${{ steps.ctx.outputs.version }}
            COMMIT=${{ steps.ctx.outputs.commit }}
          file: container/Dockerfile
          platforms: "linux/amd64,linux/arm/v8"
